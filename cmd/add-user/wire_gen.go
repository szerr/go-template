// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go-template/internal/biz"
	"go-template/internal/data"
	"go-template/internal/pkg/auth"
	"go-template/internal/pkg/config"
	"go-template/internal/pkg/database"
	"go-template/internal/pkg/db"
	"go-template/internal/pkg/logger"
)

// Injectors from wire.go:

// wireApp init
func wireApp() (*biz.UserBiz, func(), error) {
	configConfig, err := config.InitConfig()
	if err != nil {
		return nil, nil, err
	}
	zapLogger, cleanup, err := logger.NewLogger(configConfig)
	if err != nil {
		return nil, nil, err
	}
	gormDB, cleanup2, err := database.NewDB(configConfig, zapLogger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	idb := db.NewDB(gormDB)
	client, cleanup3, err := database.NewRedis(configConfig, zapLogger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	baseRepo := data.NewBaseRepo(idb, client)
	userRepo := data.NewUserRepo(baseRepo)
	ijwt := auth.NewJWT(configConfig)
	userBiz := &biz.UserBiz{
		Log:      zapLogger,
		UserRepo: userRepo,
		Jwt:      ijwt,
	}
	return userBiz, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
